#include <iostream>
#include<string>
#include<deque> //동시에 처리하기 위해 쉬운 자료구조
using namespace std;
//덱은 크기가 가변적
deque<char> wheel[4];
int answer1[100];
int answer2[100];


//백준 14891번
//톱니바퀴 하나 움직이기
void move(int number, int dir) {

	//반시계 방향
	if (dir == -1) {
		wheel[number].push_back(wheel[number][0]);
		wheel[number].pop_front();
	}
	else {//시계 방향
		wheel[number].push_front(wheel[number][7]);
		wheel[number].pop_back();

	}
}

//전체적으로 움직이기
void go(int number, int dir) {

	//오른쪽
	char flag = wheel[number][2];
	int dir1 = dir;
	//움직이기 전에 극, 다르면 반대방향으로 움직임
	for (int i = number + 1; i < 4; i++) {
		
		if (flag == wheel[i][6]) {
			break;  //같은 극이면 안움직임
		}
		//다른극이면
		dir1 *= -1;
		flag = wheel[i][2];
		move(i, dir1);

	}
	int dir2 = dir;
	//왼쪽
	char flag2 = wheel[number][6];
	for (int i = number - 1; i >= 0; i--) {

		if (flag2 == wheel[i][2]) {
			break;  //같은 극이면 안움직임
		}
		//다른극이면
		dir2 *= -1;
		flag2 = wheel[i][6];
		move(i, dir2);

	}
	//배열 바뀌니까
	move(number, dir);
}




int main()
{   //톱니바퀴 입력
	string s;
	int count = 0;
	for (int i = 0; i < 4; i++) {
		cin >> s;
		for (int j = 0; j < 8; j++) {
			wheel[i].push_back(s[j]);
		}

	}
	int n;
	cin >> n;
	for (int i = 0; i < n; i++) {
		cin >> answer1[i] >> answer2[i];
	}
	for (int i = 0; i < n; i++) {
		go(answer1[i]-1, answer2[i]);
	}

		if (wheel[0][0] == '1') {
			count += 1;
			
		}
		if (wheel[1][0] == '1') {
			count += 2;
		}
		if (wheel[2][0] == '1') {
			count += 4;
		}
		if (wheel[3][0] == '1') {
			count += 8;
		}

		cout << count;

   
}
	
	





