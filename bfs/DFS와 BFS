#include<iostream>
#include<vector>
#include<queue>
using namespace std;

vector<bool>visited;
vector<bool>visited2;
vector<vector<bool>> arrays; //2차원 배열

void dfs(int v,int n) {

	visited[v] = true;
	cout << v<<' ';
	for (int i = 1; i <=n; i++) {
		//인접하고 방문하지 않았으면
		//재귀 dfs
		
		if (visited[i] == false && arrays[v][i]) {
			
			dfs(i,n);
		}

	}



}
void bfs(int v, int n) {

	queue<int> q;
	q.push(v);
	cout << v << ' ';
	while (!q.empty()) {

		int curr = q.front();
		q.pop();
		visited2[curr] = true;
		
		
		for (int i = 1; i <= n; i++) {
			
			if (arrays[curr][i]&& visited2[i] == false) {
				q.push(i);
				visited2[i] = true;
				cout << i << ' ';
			}
		

		}

	}


}

int main() {

	//백준 1260번 
	


	int n, m, v; //정점의 갯수, 간선의 갯수, 탐색 시작 정점 번호 
	
	cin >> n >> m >> v;
	arrays.assign(n+1, vector<bool>(n+1,0)); //m행
	visited.assign(n + 1,  false); //dfs 방문 체크
	visited2.assign(n + 1, false); //bfs 방문 체크

	int a, b;
	//간선 양방향
	while (m--) {
		cin >> a >> b;

		//간선 정보 입력
		arrays[a][b] = true;
		arrays[b][a] = true;

	}

	dfs(v,n);
	cout << '\n';
	bfs(v,n);



	return 0;

}

